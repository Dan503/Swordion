
/*================================================*\
	THE TOOL KIT
//----------------------------------------------------
//	This file holds one off classes designed to be
//	used globally for a specific function
\*================================================*/

//all these classes are prefixed with TL- at the front
.TK {

	//remove dot points from a list
	&-noDots { list-style: none; margin: 0; padding: 0; }

	//Image Replacement. For when you are using a sprite or icon on an element and you don't want the text to appear
	&-imgReplace { @extend %ir;
		br {display:none;}
	}

	//Image Replacement 2. Good for submit buttons if you need IE7 compatibility
	&-imgReplace2 { @extend %ir2; }

	//prevent text wrapping
	&-noWrap { white-space: nowrap; }

	//elipsis (...) added to end of cut off text (single line only)
	&-elipsis { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; display: block; }

	//prevent overflow from being visible
	&-overflowHidden { overflow: hidden; }

	//hide element on page load
	&-hide { display:none; }

	//HIDE the element if JS is ENABLED,
	//SHOW the element if JS is DISABLED
	&-jsHide { @include MG-jsHide; }

	//visually hidden element so that screen readers can see it but normal users cant
	&-visHid { @extend %vh; }

	//counters the visually hidden styles
	&-visHid--show { @extend %anti-vh }

	//a less favorable version of visually hidden since browsers still have to render it way off screen
	&-offScreen { position: absolute; left: -999em; }

	//Force a non-floating parent element to contain it's floating child elements
	&-clearFix { @extend %clearfix; }

	//simple clear classes for clearing floats
	&-clear { clear: both;
		&--left { clear: left; }
		&--right { clear: right; }
	}


	//both vertically and horizontally center align an element that has fixed height and width
	&-centered {
		@extend %centered;

	//.centered--v | only VERTICALLY center align an element that has fixed height and width
		&--v { @extend %centered--v; }

	//.centered--h | only HORIZONTALLY center align an element that has fixed height and width
		&--h { @extend %centered--h; }
	}


	//	Screen size specific elements
	&-mobileOnly { @include MG-mobileOnly; }
	&-tabletOnly { @include MG-tabletOnly; }
	&-desktopOnly { @include MG-desktopOnly; }
	&-nonMobile { @include MG-nonMobile; }
	&-nonTablet { @include MG-nonTablet; }
	&-nonDesktop { @include MG-nonDesktop; }
	&-nonLargeScreen { @include MG-mq(min, bp('page')){ display: none!important; } }
	&-largeScreenOnly {
		@if($modern) {
			@include MG-mq(max, bp('page')){ display: none!important; }
		}
	}

	&-modernOnly {
		@if($lt-ie10) { display: none!important; }
	}
	&-legacyOnly {
		@if($modern) { display: none!important; }
	}

	//animate an element when it's css changes
	&-animate {
		@include MG-animate;
		&--medium { @include MG-animate(0.5s); }//useful for hover states
		&--slow { @include MG-animate(1s); }
		&--false { @include MG-anti-animate; }
	}

	//quickly add position relative to an element
	&-relative { position: relative; }

	//center align text
	&-centeredText { text-align: center; }

	//completly fill the space of a relative element
	&-fill { @include MG-fill; }

	//A link that only appears when the user focuses on it
	&-skipLink {
		@extend %vh;
		&:active, &:focus { @extend %anti-vh }
	}

	//add float without extra styling
	&-float {
		&--left { float: left; }
		&--right { float: right; }
	}

	//remove default styling (good for submit buttons)
	&-appearanceNone { @extend %appearanceNone; }

	&-inlineBlock { @include MG-inline-block; }

	//Styles the element to take up the max-width of the design
	&-pageWidth { margin:0 auto; max-width:bp('page'); min-width: bp('minimum'); width: 100%; display: block; }

	&-weight {
		&--light { font-weight: $light; }
		&--normal { font-weight: $normal; }
		&--bold { font-weight: $bold; }
	}

	&-spaced {
		margin: $VG-block-spacing 0;
	}

	//Make element take up full screen height
	&-fullScreen {
		@include MG-fullScreen;
	}

	&-willChange {
		&--isApplied-JS { will-change: transform; }
	}

	&-flexValign {
		display: flex;
		align-items: center;
	}

	&-flex {
		display: flex!important;
	}
	&-flexGrow {
		flex-grow: 1;
	}
}
