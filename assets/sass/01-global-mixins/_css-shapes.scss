//basic line
@mixin M-line ($type, $color, $length:25px,$thickness:2px, $rotation: false, $origin: center){
	@if ($type == v){
		height: $length;
		width: 0px;
		border-left: $thickness solid $color;
	} @else if ($type == h){
		height: 0px;
		width: $length;
		border-bottom: $thickness solid $color;
	}
	@if ($rotation != false){
		@include M-rotate($rotation, $origin);
	}
}

///*******************\
//	CSS TRIANGLES
//*******************/

//$thickness is half the width of the side furthest from the point.

@mixin M-tri($direction, $color: #000, $length: 12px, $thickness: round($length * 0.57), $thickness2: $thickness) {
	display: block;
	width: 0!important;
	height: 0!important;
	overflow: hidden;

    @if ($direction == up) {
      border-top: none;
      border-left: $thickness solid transparent;
      border-right: $thickness2 solid transparent;
      border-bottom: $length solid $color;
    }

    @if ($direction == down) {
      border-bottom: none;
      border-right: $thickness solid transparent;
      border-left: $thickness2 solid transparent;
      border-top: $length solid $color;
    }

    @if ($direction == left) {
      border-left: none;
      border-bottom: $thickness solid transparent;
      border-top: $thickness2 solid transparent;
      border-right: $length solid $color;
    }

    @if ($direction == right) {
      border-right: none;
      border-top: $thickness solid transparent;
      border-bottom: $thickness2 solid transparent;
      border-left: $length solid $color;
    }
}

///***********************************\
//	PURE CSS POINTING ARROWS ( -> )
//***********************************/
//IE9+ only :(
//works best if $thickness is a multiple of 2
@mixin M-arrow($direction, $color, $length, $head-size: $length * 0.75, $thickness: 2px, $rotation: 0, $origin: center){
	position: relative;
	display: block;

	@if ( ($direction == left) or ($direction == right) ){
		@if ($rotation != 0){
			@include M-line(h,$color,$length, $thickness, $rotation, $origin);
		} @else {
			@include M-line(h,$color,$length, $thickness);
		}
	} @else {
		@if ($rotation != 0){
			@include M-line(v,$color,$length, $thickness, $rotation, $origin);
		} @else {
			@include M-line(v,$color,$length, $thickness);
		}
	}

	@include M-before {
		position: absolute;
		border: $thickness solid $color;
		@include M-size($head-size);

		@if ($direction == up){
			right: ($thickness/2);
			top: -($thickness/2);
			border-bottom: none;
			border-left: none;
			@include M-rotate(-45,top right);

		} @else if ($direction == down) {
			right: ($thickness/2);
			bottom: -($thickness/2);
			border-top: none;
			border-left: none;
			@include M-rotate(45,bottom right);

		} @else if ($direction == left) {
			left: -($thickness/2);
			bottom: -($thickness/2);
			border-top: none;
			border-right: none;
			@include M-rotate(45,bottom left);

		} @else if ($direction == right) {
			right: -($thickness/2);
			bottom: -($thickness/2);
			border-top: none;
			border-left: none;
			@include M-rotate(-45,bottom right);
		}

	}
}

  /////////////
 // Circles //
/////////////


@mixin M-circle($type, $color, $height, $thickness: 2px,$width:$height){

	border-radius: 50%;
	display: block;
	@include M-size($height,$width);

	@if ($type == fill){
//filled circle
		background-color: $color;
	} @else if ($type == stroke){
//empty circle
		border: $thickness solid $color;
	}
}


  ///////////////////////////
 // Plus and Minus shapes //
///////////////////////////

@mixin M-plus-minus-base($color) {
		display: block;
		content: '';
		@include M-centered;
		border: 0px solid $color;
}

@mixin M-plus($color, $size: 10px, $thickness: 2px){
	position: relative;
	&:before, &:after {
		@include M-plus-minus-base($color);
		@content;
	}
	&:before{
		height: 0px;
		width: $size;
		border-bottom-width: $thickness;
	}
	&:after{
		height: $size;
		width: 0px;
		border-left-width: $thickness;
	}
}
@mixin M-minus($color, $size: 10px, $thickness: 2px){
	position: relative;
	&:before {
		@include M-plus-minus-base($color);
		height: 0px;
		width: $size;
		border-bottom-width: $thickness;
		@content;
	}
}

//Works in IE9+, use a cross icon as a backup if needed
@mixin M-cross($color, $size: 10px, $thickness: 2px, $backup-icon: false){
	@if ($lt-ie9 and $backup-icon == false){
		@include M-plus($color,$size,$thickness){
			@content;
		};
		@include M-rotate(45);
	} @else {
		@include M-icon($backup-icon, $size){
			color: $color;
			@content;//careful with the @content if using a backup
		}
	}
}

//experimental plus to minus mixin
@mixin M-plus-to-minus($color, $size: 10px, $thickness: 2px){
	position: relative;
	&:before, &:after {
		@extend %animate !optional;
		@include M-plus-minus-base($color);
		@content;
	}
	&:before{
		height: $thickness;
		width: $size;
	}
	&:after{
		height: $size;
		width: $thickness;
		border-radius: 0%;
	}
	&.minus {
		&:after {
			height: $thickness;
			width: $size;
			border-radius: 50%;
		}
	}
}

//experimental minus to plus animation mixin
@mixin M-minus-to-plus($color, $size: 10px, $thickness: 2px){
	position: relative;
	&:before, &:after {
		@extend %animate !optional;
		@include M-plus-minus-base($color);
		@content;
	}
	&:before{
		height: $thickness;
		width: $size;
	}
	&:after{
		height: $thickness;
		width: $size;
		border-radius: 50%;
	}
	&.plus {
		&:after {
			height: $size;
			width: $thickness;
			border-radius: 0%;
		}
	}
}




