
//manually list all spritesheet variables here except High Def versions
$spritesheets:
	$spritesheet-alldevices,
	$spritesheet-lowdef;


@mixin M-sprite-width($sprite) {
  width: map-get($sprite, 'width');
}

@mixin M-sprite-height($sprite) {
  height: map-get($sprite, 'height');
}

@mixin M-sprite-position($sprite) {
  background-position: map-get($sprite, 'offset_x') map-get($sprite, 'offset_y');
}

@mixin M-sprite-image($spritesheet: $spritesheet-lowdef, $retina-sheet: $spritesheet-highdef) {
	background-image: url(map-get($spritesheet, 'image'));
	@if ($spritesheet == $spritesheet-lowdef){
		@include M-retina {
			background-size: map-get($spritesheet, 'width') map-get($spritesheet, 'height');
			background-image: url(map-get($retina-sheet, 'image'));
		}
	}
}

@mixin M-sprite($sprite, $spritesheet: $spritesheet-lowdef, $retina-sheet: $spritesheet-highdef) {
  @include M-sprite-position($sprite);
  @include M-sprite-width($sprite);
  @include M-sprite-height($sprite);
  @include M-sprite-image($spritesheet, $retina-sheet);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites(map-get($spritesheet, 'sprites'));
*/
@mixin M-sprites($spritesheet) {
  $sprites: map-get($spritesheet, 'sprites');
  @each $sprite in $sprites {
    $sprite-name: map-get($sprite, 'name');
    .sprite-#{$sprite-name}:before {
		@include M-sprite-position($sprite);
		@include M-sprite-width($sprite);
		@include M-sprite-height($sprite);
    }
  }
}


//generates the sprite classes
@if ($main-sheet == true){
	[class*=" sprite-"], [class^="sprite-"] {
		@include M-before(inline-block){
			@include M-sprite-image($spritesheet-lowdef);
		}
	}
	@each $sheet in $spritesheets {
		@include M-sprites($sheet);
	}
}