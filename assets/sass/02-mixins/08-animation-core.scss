////////////////////////////
//     CSS3 ANIMATION    //
//////////////////////////

@mixin M-3d {
	@include M-gt-ie8 {
	    -webkit-transform-style: preserve-3d;
		transform-style: preserve-3d;
	}
}
%M-3d { @include M-3d; }

/*@include M-animate(0.5s);
@include M-animate((
(
	attributes: margin padding background, (default: all)
	duration: 0.2s,
	delay: '',
	ease: ease-in-out
), (
	attributes: border-radius,
	duration: 0.5s
)
));
*/
//basic animation
@mixin M-animate($settings: 0.2s, $ease: ease-in-out, $attributes: all, $style: flat){
	@include M-gt-ie8 {

		$rule: ();

		@if (type-of(nth($settings,1)) == 'map'){
			$defaultSettings: (
				attributes: all,
				duration: 0.2s,
				delay: 0s,
				ease: ease-in-out
			);


			@each $transition in $settings {

				//applies the default value to any values that are missing from the provided list
				$transition: defaultTo($transition, $defaultSettings);

				//iterates through each setting
				@each $key, $value in $transition {

					@if ($key == 'attributes'){
						//iterates through every listed attribute
						@each $attribute in $value {

							//grabs the settings that are to be applied to the attribute
							$duration: map-get($transition, 'duration');
							$delay: map-get($transition, 'delay');
							$ease: map-get($transition, 'ease');

							//generates the final rule ready for output
							$values: $attribute $duration $delay $ease;
							$rule: append($rule, $values, 'comma');

						}
					}
				}
			}
			//
		} @else {
			@if ($settings == 'fast'){
				$settings: 0.2s;
			} @else if ($settings == 'medium'){
				$settings: 0.5s;
			} @else if ($settings == 'slow'){
				$settings: 1s;
			}

			//allows $attributes to take multiple arguments
			@each $variable in $attributes {
				$values: $variable $settings $ease;
				$rule: append($rule, $values, 'comma');
			}
		}

		//@debug $rule;

	    -webkit-transition: $rule;
	    transition: $rule;

		@if ($style == '3D'){
			@include M-3d;
		}
	}
}

//The animation @extend requires this usage if used because of the IE style sheet split:
//@extend %animate !optional;
%animate { @include M-animate; } //basic animation (0.5s)
%animate--fast { @include M-animate(0.2s,ease-out); }//Ideal for animating hover states (0.2s)
%animate--slow { @include M-animate(1s); }//Drawn out animation for a more majestic effect (1s)

//Removes animation from elements with animation set
@mixin M-anti-animate($important: true) {
	@include M-gt-ie8 {
		@if ($important == true){
		    //-webkit-transition: none !important;
		    transition: none !important;
		} @else {
		    //-webkit-transition: none;
		    transition: none;
		}
	}
}
//requires this usage if used because of the IE test:
//@extend %anti-animate !optional;
%anti-animate { @include M-anti-animate; }

@if ($main-sheet == true){
	.animate { @extend %animate !optional; }
	.animate--fast { @extend %animate--fast !optional; }
	.animate--slow { @extend %animate--slow !optional; }
	.anti-animate { @extend %anti-animate !optional; }
}


///////////////////////////////
//	Keyframe animations		//
/////////////////////////////

//analyses the animation set and generates the css rules for each key frame
@mixin M-kf-animation-loop ($animation_set){
	@include M-gt-ie8 {

		//can be useful for debugging
		//@debug $animation_set;

		@each $frame in $animation_set {
			$keyframe: nth($frame,1);
			$css: nth($frame,2);

		 	#{$keyframe} {
		 		@each $attribute, $value in $css {
					@if ($attribute == rotate){
						@include M-rotate($value);
					} @else if ($attribute == 3D-rotate){
						@include M-rotate(nth($value,1), $axis: nth($value,2));
					} @else if ($attribute == scale) {
						@include M-scale($value);
					} @else {
						#{$attribute} : $value;
					}
		 		}
			}
		}
	}
};

//Sets up the key-frames for the animation
//Use this on it's own to set up an animation that is shared across multiple elements or multiple timings
@mixin M-kf-definition($animation_name, $animation_set) {
	@at-root(without: all) {
	@include M-gt-ie8 {
		@-webkit-keyframes #{$animation_name} {
			//@include M-keyframes-loop($keyframes, $rules);
			@include M-kf-animation-loop($animation_set);
		}
		@keyframes #{$animation_name} {
			@include M-kf-animation-loop($animation_set);
			}
		}
	}
}

//Defines how the animation plays out
//use this on it's own to call on animations made with the kf-definition mixin
//This mixin allows you to use the same animation set as another element but give different timings
@mixin M-kf-predefined($animation_name, $settings: 1s, $loops: infinite, $ease: linear, $fill: both){
	@include M-gt-ie8 {
		-webkit-animation: $animation_name $settings $loops $ease $fill; //* Safari 4+ */
		animation:         $animation_name $settings $loops $ease $fill; //* IE 10+, Fx 29+ */

	}
}

//Ties all the key-frame animation mixins together into a single easy to use mixin
@mixin M-kf-animate($animation_name, $animation_set, $settings: 1s, $loops: infinite, $ease: linear, $fill: both) {
	@include M-gt-ie8 {
		@include M-kf-definition($animation_name, $animation_set);
		@include M-kf-predefined($animation_name, $settings, $loops, $ease, $fill);
	}
}


//EXAMPLE USAGE:

//$example_animation:
//	0% (
//		scale: 0,
//		opacity: 0
//	),
//	80% (
//		scale: 1,
//		opacity: 1
//	),
//	100% (
//		scale: 0,
//		opacity: 0
//	)
//;

//#element {
//	@include M-kf-animate(example_animation, $example_animation, 3s);
//}


/////////////////////////////////
//	Generate Equal key frames //
///////////////////////////////

//calculates the percentages for the key frame generator
@function keyframe_percent($index, $attribute_list){
	@return (100% / (length($attribute_list) - 1)) * ($index - 1);
	//@return (100% / 2)) * 1;
}

//generates evenly spaced key frames for an animation set
@function kf_generator($animation_set){

	$animation:	(0% (nth($animation_set, 1))),;

	@for $i from 2 through (length($animation_set)) {
			$animation_keyframe:
					///*determines at what point in the animation the attributes take effect*/
				(keyframe_percent($i, $animation_set)

				///*adds the attributes to the keyframe*/
				nth($animation_set, $i))
			;

			$animation: append($animation, $animation_keyframe, comma);
	}
	//@debug $animation; //uncomment if having issues with the generator*/
	@return ($animation);
}

//----------------------------------

//EXAMPLE USAGE (single attribute):
//(sorry about the ugliness but it works)

//$example_animation:
//	(scale: 0, opacity: 0),
//	(scale: 1, opacity: 1),
//	(scale: 0, opacity: 0)
//;

//#element {
//		@include M-kf-animate(
//			example_animation,
//			kf_generator($example_animation),
//			10s
//		);
//}

