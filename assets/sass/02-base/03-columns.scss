//================================================*\
/*	COLUMNS STYLING FILE						*/
//----------------------------------------------------
//	This file holds all the classes that handle
//	general site structure.
//================================================*/

//The styling for the central box that holds the whole page content
.container { margin:0 auto; max-width:bp('tablet'); }


//================================================*\
/*				COLUMN WIDTHS						*/
//----------------------------------------------------
//	Quickly and easily apply standard percentage
//	widths to columns based on fractions.
//
//	step 1: give container the width modifier class.
//			eg: columns--thirds
//	step 2: give extra wide columns span classes
//			eg. columns-col--span2
//	WARNING: using a span class will likely require additional
//			 styling for tablets and smaller devices
//
//	EXAMPLE HTML:
//	<ul class="columns--floated columns--thirds">
//		<li class="columns-col">Column is 1/3 wide on desktop</li>
//		<li class="columns-col columns-col--span2">column is 2/3 wide on desktop</li>
//	</ul>
//================================================*/
	$colWidths: (
		class: full,
		breaks: false,
	), (
		class: halves,
		breaks: (
			bp('mobile') 100%,
		),
	), (
		class: thirds,
		breaks: (
			bp('mobile') 100%,
		),
	), (
		class: quarters,
		breaks: (
			bp('tablet') 50%,
			bp('mobile') 100%,
		),
	), (
		class: fiths,
		breaks: (
			bp('mid') 33.33%,
			bp('mobile') 50%,
			bp('small') 100%,
		),
	), (
		class: sixths,
		breaks:	(
			bp('mid') 33.33%,
			bp('mobile') 50%,
			bp('small') 100%,
		),
	);

	//setting up variables for deTabelisation

	$deTabelise--mobile: ();
	$deTabelise--phablet: ();
	$deTabelise--tablet: ();


	@for $i from 1 through length($colWidths) {
		$array: nth($colWidths, $i);
		$class: map-get($array, class);
		$breaks: map-get($array, breaks);

		.columns--#{$class}:not(.columns--disableMQs) > .columns-col {
			width: percentage(1/$i);

			@if ($i > 2){
				@for $x from 2 through ($i - 1) {
					&--span#{$x} { width: percentage($x/$i); }
				}
			}

			@if ($breaks != false) {
				@for $y from 1 through length($breaks) {
					$breakData : nth($breaks, $y);
					$device : nth($breakData, 1);
					$width : nth($breakData, 2);
					@include M-mq(max,$device){
						width: $width;
					}
				}
			}
		}
		//de-Tabelise for halves and thirds
		@if ($i <= 2 and $i < 4){
			$deTabelise--mobile: append($deTabelise--mobile, '.columns--' + $class + '.columns--tabular:not(.columns--disableMQs) >  .columns-col',comma);
		}
		//de-Tabelise for quarters
		@if ($i == 4){
			$deTabelise--tablet: append($deTabelise--tablet, '.columns--' + $class + '.columns--tabular:not(.columns--disableMQs) >  .columns-col',comma);
		}
		//de-Tabelise for fiths and higher
		@if ($i >= 5){
			$deTabelise--phablet: append($deTabelise--phablet, '.columns--' + $class + '.columns--tabular:not(.columns--disableMQs) >  .columns-col',comma);
		}
	}

	$deTabelisers :
		$deTabelise--tablet bp('tablet'),
		$deTabelise--phablet bp('mid'),
		$deTabelise--mobile bp('mobile'),
	;

/*change to floated format at certain screen sizes for certain column widths if set to tabular style*/
@for $i from 1 through length($deTabelisers) {
	$array: nth($deTabelisers,$i);
	$list: nth($array,1);
	$res: nth($array,2);

	@include M-mq(max,$res){
		#{$list} {
			display: block;
			float: left;
		}
	}
}




.columns {
	@extend %noDots;
	width: 100%;

	&-col {
		padding: 0;
		margin: 0;
	}

//================================================*\
//*				FLOATED COLUMNS					*/
//----------------------------------------------------
//	These columns all share the same repeating
//	width. They will not share the same heights
//	without the help of js.
//	They will wrap.
//
//	Apply floated column styling with the
//	columns--floated class
//================================================*/
	&--floated {
		@extend %clearfix;
		> .columns-col { float: left;
			&-padding { padding: 0 5%; }

		}
		&:not(.columns--disableMQs){
			@include M-mq(max,bp('mobile')){
				margin-bottom: 20px;
			}
		}
	}
	@include M-mq(max,bp('mobile')){
		&--fiths[class*="columns"]:not(.columns--disableMQs) { text-align: center;
			> .columns-col { display: inline-block; float: none; }
		}
	}


//================================================*\
//*				TABULAR COLUMNS					*/
//----------------------------------------------------
//	These columns act like table cells. They will
//	all be the same height but will vary in width
//	based on the content inside them (unless a width class is provided).
//	They will not wrap on Desktop.
//	They switch to floated style at various screen widths
//	so they can wrap depending on the width class given.
//
//	Apply table column styling with the
//	columns--tabular class
//================================================*/
	&--tabular {
		display: table;
		&:not(.columns--disableMQs){
			@include M-mq(max,bp('tablet')){
				@include M-after { clear: both; }
			}
		}

		> .columns-col {
			display: table-cell;

			&--vAlign { vertical-align: middle; }

			//overides width class
			//WARNING: will require extra responsive styling
			&--autoWidth { width: auto; }
		}
	}

	&--flex {
		display: table;//tabular backup for IE9 and below
		@include M-gt-ie8 {
			display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
			display: -ms-flexbox;      /* TWEENER - IE 10 */
			display: -webkit-flex;     /* NEW - Chrome */
			display: flex;             /* NEW, Spec - Opera 12.1, Firefox 20+ */

			@include M-prefix(flex-wrap, wrap, ms webkit);
			@include M-prefix(align-content, stretch, ms webkit);

			> .columns-col {
				.lt-ie10 & { display: table-cell; }//tabular backup for IE9 and below
				@include M-prefix(flex-grow,1, ms webkit);
			}
		}
	}
}

