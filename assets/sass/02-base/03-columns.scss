
//You can alter the available column gutter classes here
$columnGutters: 5, 10, 15, 20, 25, 30;


//================================================*\
/*	COLUMNS STYLING FILE						*/
//----------------------------------------------------
//	This file holds all the classes that handle
//	general site structure.
//================================================*/

//The styling for the central box that holds the whole page content
.container { margin:0 auto; max-width:bp('page'); }


//================================================*\
/*				COLUMN WIDTHS						*/
//----------------------------------------------------
//	Quickly and easily apply standard percentage
//	widths to columns based on fractions.
//
//	step 1: give container the width modifier class.
//			eg: columns--thirds
//	step 2: give extra wide columns span classes
//			eg. columns-col--span2
//	WARNING: using a span class will likely require additional
//			 styling for tablets and smaller devices
//
//	EXAMPLE HTML:
//	<ul class="columns--floated columns--thirds">
//		<li class="columns-col">Column is 1/3 wide on desktop</li>
//		<li class="columns-col columns-col--span2">column is 2/3 wide on desktop</li>
//	</ul>
//================================================*/
$colWidths: (
		class: full,
		breaks: false,
	), (
		class: halves,
		breaks: (
			bp('mobile') 100%,
		),
	), (
		class: thirds,
		breaks: (
			bp('mobile') 100%,
		),
	), (
		class: quarters,
		breaks: (
			bp('tablet') 50%,
			bp('mobile') 100%,
		),
	), (
		class: fiths,
		breaks: (
			bp('mid') 33.33%,
			bp('mobile') 50%,
			bp('small') 100%,
		),
	), (
		class: sixths,
		breaks:	(
			bp('mid') 33.33%,
			bp('mobile') 50%,
			bp('small') 100%,
		),
	)
;

@for $i from 1 through length($colWidths) {
	$array: nth($colWidths, $i);
	$class: map-get($array, class);
	$breaks: map-get($array, breaks);

	.columns--#{$class}:not(.columns--disableMQs) > .columns-col {
		width: percentage(1/$i);

		@if ($i > 2){
			@for $x from 2 through ($i - 1) {
				&--span#{$x} { width: percentage($x/$i); }
			}
		}

		@if ($breaks != false) {
			@for $y from 1 through length($breaks) {
				$breakData : nth($breaks, $y);
				$device : nth($breakData, 1);
				$width : nth($breakData, 2);
				@include M-mq(max,$device){
					width: $width;
				}
			}
		}
	}
}


.columns {
	@extend %noDots;
	width: 100%;
	display: table;//tabular backup for IE9 and below
	@include M-gt-ie8 {
		display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
		display: -ms-flexbox;      /* TWEENER - IE 10 */
		display: -webkit-flex;     /* NEW - Chrome */
		display: flex;             /* NEW, Spec - Opera 12.1, Firefox 20+ */

		@include M-prefix(flex-wrap, wrap, ms webkit);
		@include M-prefix(align-content, stretch, ms webkit);

		> .columns-col {
			@include M-prefix(flex-grow,1, ms webkit);
		}
	}
	.lt-ie10 & > .columns-col { display: table-cell; }//tabular backup for IE9 and below

	&-col {
		padding: 0;
		margin: 0;
		background-clip: padding-box;
		border-color: transparent;
		border-style: solid;
	}

	@each $gutter in $columnGutters {
		&--gutter-#{$gutter} {
			$actualGutter: ($gutter * 1px) / 2;
			margin: -$actualGutter;
			> .columns-col {
				border-width: $actualGutter;
			}
		}
	}

}