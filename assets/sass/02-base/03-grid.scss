
//================================================*\
/*	GRID STYLING FILE						*/
//----------------------------------------------------
//	This file holds the code that generates the
//	classes for the grid system.
//
//	DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT
//	YOU'RE DOING!
//================================================*/

%vAlign {
	@include M-flex;
	@include M-prefix(flex-direction,column, $flexPrefixes);
	@include M-prefix(justify-content,center, $flexPrefixes);
}

%flex {
	@include M-flex;
}

//================================================*\
/*				GRID WIDTHS						*/
//----------------------------------------------------
//	Quickly and easily apply standard percentage
//	widths to grid cells based on fractions.
//
//	step 1: give container the width modifier class.
//			eg: grid--thirds
//	step 2: give extra wide grid span classes
//			eg. grid-cell--span2
//	WARNING: using a span class will likely require additional
//			 styling for tablets and smaller devices
//
//	EXAMPLE HTML:
//	<ul class="grid grid--thirds">
//		<li class="grid-cell">Column is 1/3 wide on desktop</li>
//		<li class="grid-cell grid-cell--span2">column is 2/3 wide on desktop</li>
//	</ul>
//================================================*/


@for $i from 1 through length($cellWidths) {
	$array: nth($cellWidths, $i);
	$class: map-get($array, class);
	$defaultWidth: map-get($array, default);
	$breaks: map-get($array, breaks);

//sets the default grid-cell widths
	.grid--#{$class} {
		> .grid-cell {
			//width: percentage(1/$i); //The clever way :D
			width: $defaultWidth; //more editable way -_-

//.grid-cell--span-# styling
			@if ($i > 2){
				@for $x from 2 through ($i - 1) {
					&--span-#{$x} { width: $defaultWidth * $x; }
				}
			}
		}

//Applies the media queries for the break points
		&:not(.grid--disableMQs) {
			@if ($breaks != false) {
				@for $y from 1 through length($breaks) {
					$breakData : nth($breaks, $y);
					$device : nth($breakData, 1);
					$width : nth($breakData, 2);
					@include M-mq(max,$device){
						> .grid-cell { width: $width; }
					}
				}
			}
		}
		.no-flexbox &.grid--enableWrapping > .grid-cell {
			@if ($i > 2) {
				&:nth-child(#{$i}n+1) { clear: left; }
			}
		}
	}
}

//base grid styling
.grid {
	@extend %noDots;
	min-width: 100%;
	border: 0 solid #000;
	@include M-gt-ie8 {
		@extend %flex;
		@include M-prefix(align-content, stretch, $flexPrefixes);

		@include M-mq(max,bp('large')){
			@include M-prefix(flex-wrap, wrap, $flexPrefixes);
		}
	}
	@include M-lt-ie9 {
		@include M-clearfix;
	}

//Unfortunately this is a necessity for IE compatibility
	&--enableWrapping {
		.no-flexbox & {
			display: block;
			@extend %clearfix;
			& > .grid-cell {
				float: left;
			}
		}

		@include M-gt-ie8 {
			.flexbox & {
				@include M-flex;
				@include M-prefix(flex-wrap, wrap, $flexPrefixes);
			}
		}
	}

//base grid-cell styling
	&-cell {
		padding: 0;
		margin: 0;
		background-clip: padding-box!important;
		border: 0 solid transparent;
		@include M-prefix(flex-grow,1, $flexPrefixes);
		outline-color: #000;
		border-color: #000;
	}

//base grid-inner styling
		&-inner {
			border: 0 solid #000;
		}

//grid--border-# styling
	@each $border in $cellBorders {
		&--border-#{$border} {
			$border: $border * 1px;
			border-width: $border 0 0 $border;
			> .grid-cell {
				border-width: 0 $border $border 0;
			}
			&[class*="grid--gutter-"] {
				> .grid-cell {
					> .grid-inner {
						border-width: $border;
					}
				}
			}
		}
	}

//grid--gutter-# styling
	&[class*="grid--gutter-"] {
		> .grid-cell, & { border-color: transparent!important; }
	}
	@each $gutter in $cellGutters {
		&--gutter-#{$gutter} {
			$gutter: $gutter * 1px;
			margin: -$gutter;
			border-width: $gutter 0 0 $gutter;
			> .grid-cell {
				border-width: 0 $gutter $gutter 0;
			}
		}
	}


//grid--padding-# styling
	@each $pad in $cellPadding {
		&--padding-#{$pad} {
			> .grid-cell {
				padding: $pad * 1px;
			}
			&.grid--hasInners {
				> .grid-cell > .grid-inner {
					padding: $pad * 1px;
				}
			}
		}
	}

//vertical alignment code
	@include M-gt-ie8 {
		&--vAlign {
			> .grid-cell {
				@extend %vAlign;
			}
			&.grid--hasInners {
				> .grid-cell > .grid-inner {
					@extend %vAlign;
				}
			}
		}
	}

	&--hasInners {
		> .grid-cell {
			@extend %flex;
			@include M-prefix(flex-direction,column, $flexPrefixes);
			> .grid-inner {
				@include M-prefix(flex-grow,1, $flexPrefixes);
			}
		}
		&[class*="grid--padding-"] {
			> .grid-cell {
				padding: 0!important;
			}
		}
	}

//tabular backup for IE9 and below
	.lt-ie10 & {
		display: table;
		> .grid-cell { display: table-cell; }
	 	&--vAlign > .grid-cell { vertical-align: middle; }
	}
}
