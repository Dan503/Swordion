
//================================================*\
/*	GRID STYLING FILE						*/
//----------------------------------------------------
//	This file holds the code that generates the
//	classes for the grid system.
//
//	DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT
//	YOU'RE DOING!
//================================================*/



//================================================*\
/*				GRID WIDTHS						*/
//----------------------------------------------------
//	Quickly and easily apply standard percentage
//	widths to grid cells based on fractions.
//
//	step 1: give container the width modifier class.
//			eg: grid--thirds
//	step 2: give extra wide grid span classes
//			eg. grid-cell--span2
//	WARNING: using a span class will likely require additional
//			 styling for tablets and smaller devices
//
//	EXAMPLE HTML:
//	<ul class="grid grid--thirds">
//		<li class="grid-cell">Column is 1/3 wide on desktop</li>
//		<li class="grid-cell grid-cell--span2">column is 2/3 wide on desktop</li>
//	</ul>
//================================================*/

@for $i from 1 through length($cellWidths) {
	$array: nth($cellWidths, $i);
	$class: map-get($array, class);
	$defaultWidth: map-get($array, default);
	$breaks: map-get($array, breaks);

	.grid--#{$class}:not(.grid--disableMQs) > .grid-cell {
		//width: percentage(1/$i); //clever way
		width: $defaultWidth; //more editable way

		@if ($i > 2){
			@for $x from 2 through ($i - 1) {
				&--span-#{$x} { width: percentage($x/$i); }
			}
		}

		@if ($breaks != false) {
			@for $y from 1 through length($breaks) {
				$breakData : nth($breaks, $y);
				$device : nth($breakData, 1);
				$width : nth($breakData, 2);
				@include M-mq(max,$device){
					width: $width;
				}
			}
		}
	}
}


.grid {
	@extend %noDots;
	min-width: 100%;
	border: 0 solid #000;
	@include M-gt-ie8 {
		@include M-flex;
		@include M-prefix(align-content, stretch, $flexPrefixes);

		&:not(.grid--noWrap){
			@include M-prefix(flex-wrap, wrap, $flexPrefixes);
		}
	}

	&-cell {
		padding: 0;
		margin: 0;
		background-clip: padding-box!important;
		border: 0 solid transparent;
		@include M-prefix(flex-grow,1, $flexPrefixes);
		outline-color: #000;
		border-color: #000;
	}

//grid--gutter styling
	&[class*="grid--gutter-"] > .grid-cell { border-color: transparent!important; }
	@each $gutter in $cellGutters {
		&--gutter-#{$gutter} {
			$actualGutter: round(($gutter * 1px) / 2);
			margin: -$actualGutter;
			> .grid-cell {
				border-width: $actualGutter;
				outline-offset: -$actualGutter - 1;
			}

			@each $outline in $cellOutlines {
				&.grid--outline-#{$outline} {
					> .grid-cell {
						$outline: $outline * 1px;
						outline-width: $outline;
						outline-style: solid;
						outline-offset: round((-$gutter / 2) - $outline);
					}
				}
			}
		}
	}

//grid--border styling
	@each $border in $cellBorders {
		&--border-#{$border} {
			@if (isEven($border)== false){
				@warn "#{$border} is an uneven value. Only even values are supported. Please remove the #{$border} value from $cellBorders in the gid.scss config file"
			}

			$border: ($border / 2) * 1px;
			border-width: $border;
			> .grid-cell {
				border-width: $border;
			}
		}
	}

//grid--padding styling
	@each $pad in $cellPadding {
		&--padding-#{$pad} {
			> .grid-cell {
				padding: $pad * 1px;
			}
		}
	}

	@include M-gt-ie8 {
		&--vAlign > .grid-cell {
			@include M-flex;
			@include M-prefix(flex-direction,column, $flexPrefixes);
			@include M-prefix(justify-content,center, $flexPrefixes);
		}
	}

	//tabular backup for IE9 and below
	.lt-ie10 & {
		display: table;
		> .grid-cell { display: table-cell; }
	 	&--vAlign > .grid-cell { vertical-align: middle; }
	}
}
