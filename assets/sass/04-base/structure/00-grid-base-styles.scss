
//================================================*\
/*	GRID STYLING FILE						*/
//----------------------------------------------------
//	This file holds the code that generates the
//	classes for the grid system.
//
//	DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT
//	YOU'RE DOING!
//================================================*/


//switches IE (and other non-flexbox friendly browsers) to using float mode
@mixin M-ieFloat {
	.no-flexbox & {
		display: block;
		@extend %clearfix;
		& > * {
			float: left;
			display: block;
		}
	}
}

@mixin M-grid-setting($addition, $type: 'class'){
	$selector: '';
	@each $item in $addition {
		@if ($type == 'class'){
			$selector: '#{$selector}.grid-setting--#{$item}';
		} @else if ($type =='not') {
			$selector: '#{$selector}:not(.grid-setting--#{$item})';
		} @else {
			$selector: $selector + $item;
		}
	}
	.grid#{$selector}, .grid-parent#{$selector} > * {
		@content;
	}
}

@mixin M-grid {
	.grid, .grid-parent > * {
		@content;
	}
}


//================================================*\
/*				GRID WIDTHS						*/
//----------------------------------------------------
//	Quickly and easily apply standard percentage
//	widths to grid cells based on fractions.
//
//	step 1: give container the width modifier class.
//			eg: grid--thirds
//	step 2: give extra wide grid span classes
//			eg. grid-cell--span2
//	WARNING: using a span class will likely require additional
//			 styling for tablets and smaller devices
//
//	EXAMPLE HTML:
//	<ul class="grid grid--thirds">
//		<li class="grid-cell">Column is 1/3 wide on desktop</li>
//		<li class="grid-cell grid-cell--span2">column is 2/3 wide on desktop</li>
//	</ul>
//================================================*/

@for $i from 1 through length($cellWidths) {
	$array: nth($cellWidths, $i);
	$class: map-get($array, class);
	$defaultWidth: map-get($array, default);
	$breaks: map-get($array, breaks);

//sets the default grid-cell widths (grid-setting--thirds)
	@include M-grid-setting($class) {
		> * {
			//width: percentage(1/$i); //The clever way :D
			width: $defaultWidth; //more editable way -_-
		}
	}

//.grid-setting--cell-#-span-# styling
	@if ($i > 1){
		@for $cell from 1 through $i {
			@for $span from 2 through $i {
				@include M-grid-setting(($class,'cell-#{$cell}--span-#{$span}')) {
					@if ($cell == 1){
						$n: 1;
						@if ($class == 'halves'){
							$n: 2;
						} @else if ($class == 'thirds') {
							$n: 3;
						} @else if ($class == 'quarters') {
							$n: 4;
						} @else if ($class == 'fiths') {
							$n: 5;
						} @else if ($class == 'sixths') {
							$n: 6;
						}
						> *:first-child, > *:nth-child(#{$n}n + 1) {  width: $defaultWidth * $span; }

					} @else {
						> *:nth-child(#{$cell}n) {  width: $defaultWidth * $span; }
					}
				}
			}
			@include M-grid-setting('cell-#{$cell}--hAlign') {
				text-align: center;

				img {
					display: block;
					margin: 0 auto;
				}
			}
		}
	}

//Applies the media queries for the break points
	.grid.grid-setting--#{$class}:not(.grid-setting--disableMQs), .grid-parent#{$class}:not(.grid-setting--disableMQs) > * {
		@if ($breaks != false) {
			@for $y from 1 through length($breaks) {
				$breakData : nth($breaks, $y);
				$device : nth($breakData, 1);
				$width : nth($breakData, 2);
				@include M-mq(max,$device){
					> * { width: $width; }
				}
			}
		}
	}

//clears left if non-flexbox (and can read nth-child)
	.no-flexbox {
		@include M-grid-setting('enableWrapping'){
			@if ($i > 2) {
				&:nth-child(#{$i}n+1) { clear: left; }
			}
		}
	}
}

@include M-grid {
//.grid base styles (needs to overwrite grid-cell)
	@extend %noDots;
	min-width: 100%;
	border: 0 solid transparent;
	@include M-gt-ie8 {
		@include M-flex;
		@include M-prefix(align-content, stretch, $flexPrefixes);

	}

//base grid-cell styling
	> * {
		display: block;
		padding: 0;
		margin: 0;
		background-clip: padding-box!important;
		border: 0 solid transparent;
		@include M-flexGrow;
		min-width: 0;
	}
}

@include M-gt-ie8 {
		@include M-mq(max,bp('page')){
			@include M-grid-setting(('disableMQs', 'noWrap'), 'not'){
				@include M-flexWrap;
			}
		}
}


//base grid-inner styling
@include M-grid-setting('hasInners'){
	> * { @include M-flex;
		> * {
			@include M-flexGrow;
		}
	}
}

//grid--border-# styling
@each $border in $cellBorders {
	@include M-grid-setting('border-#{$border}'){
		$border: $border * 1px;
		border-width: $border 0 0 $border;
		> .grid-cell {
			border-width: 0 $border $border 0;
		}
		&[class*="grid--gutter-"] {
			> .grid-cell {
				> .grid-inner {
					border-width: $border;
				}
			}
		}
	}
}

//grid--gutter-# styling
@include M-grid-setting('[class*="grid--gutter-"]', attribute){
	> *, & {
		border-color: transparent;
		@include M-lt-ie9 {
			border-color: $gutter-ieFallback;
		}
	}
}
@include M-grid-setting('outerGutters'){
	margin-top: 0!important;
	margin-bottom: 0!important;
	/*.lt-ie10 & {
		border-left: 0;
		margin-left: 0;
	}*/
}


//Handles the cell gutters
	@mixin M-grid-cellGutter ($gutter){
		margin: -$gutter;//!important;
		border-width: $gutter 0 0 $gutter;
		> * {
			border-width: 0 $gutter $gutter 0;
		}
	}
	@each $class, $gutter in $cellGutters {
		@include M-grid-setting('gutter-#{$class}'){
			@if (length($gutter) > 1) {
				@each $screenSize, $value in $gutter {
					@if ($screenSize == 'default') {
						@include M-grid-cellGutter($value);
					} @else {
						@include M-mq(max,$screenSize){
							@include M-grid-cellGutter($value);
						}
					}
				}
			} @else {
				@include M-grid-cellGutter($gutter)
			}

	//a custom bit for this site only
			@if (($class == 'blocks') or ($class == 'footNav')){
				@include M-mq(max, bp('page') + $VG-block-spacing){
					@include M-grid {
						&, & > * {
							margin-left: 0!important;
							margin-right: 0!important;
						}
					}
				}
			}
		}
	}

//grid-wrap styling... really only necessary for use with grid-setting--gutter-#
	.grid-wrap {
		overflow: hidden;
	}


//vertical alignment code
	@include M-gt-ie8 {
		@include M-grid-setting('vAlign'){
			> * {
				@extend %flexValign;
			}
			&.grid--hasInners {
				> .grid-cell > .grid-inner {
					@extend %flexValign;
				}
			}
		}
		@include M-grid-setting(('vAlign', 'hasInners')){
			> * {
				@include M-flex;
				@include M-prefix(flex-direction,column, $flexPrefixes);
				> * {
					@include M-prefix(flex-grow,1, $flexPrefixes);
				}
			}
		}
	}

//tabular backup for IE9 and below
	.no-flexbox {
		.grid, .grid-parent > * {
			display: table;
			width: 100%;
			> * { display: table-cell; vertical-align: top; }
		}
		@include M-grid-setting('hasInners'){
			> * { display: block; }
		}
		@include M-grid-setting('vAlign'){
		 	> * { vertical-align: middle; }
		}
	}


//Unfortunately this is a necessity for IE compatibility
	@include M-grid-setting('enableWrapping'){
		@include M-ieFloat;

		@include M-gt-ie8 {
			@include M-flexWrap;
		}
	}

//allows IE to use floats instead of display table without affecting modern browsers
	@include M-grid-setting('ieFloat'){
		@include M-ieFloat;
	}



