///////////////////////
//  sass functions  //
/////////////////////

//A function for filling in a map variable with default values
@function defaultTo($mapVariable, $defaultMap){
	//if it's a map, treat each setting in the map seperately
	@if (type-of($defaultMap) == 'map' ){

		//@debug $mapVariable;
		//@debug $defaultMap;

	    $finalParams: $mapVariable;

	    // We iterate over each property of the defaultMap
	    @each $key, $value in $defaultMap {
	        // If the variable map does not have the associative key
	        @if (not map-has-key($mapVariable, $key)) {

	            // add it to finalParams
            	$finalParams: map-merge($finalParams, ($key : $value));

	        }
	    }

		//@debug $finalParams;

	    @return $finalParams;

	} @else {
		@error 'The defaultTo function only works for maps, try using "@if (variable-exists(variableName)){ ... }" or "@if (global-variable-exists(variableName)){ ... }" instead';
	}
}

//Unfortunately you need to do this for variables that aren't maps since SASS wont parse an undefined variable into a function
/*
@if (variable-exists(testing)){
	//code that fires if $testing variable is defined
} @else {
	//code that fires if $testing variable is undefined
}
*/

//$test: defaultTo(testing, 'working?', $testing);
//@debug $test;


//Check if a value is an even number
@function isEven($value) {
	@if ($value % 2 == 0) {
		@return true;
	} @else {
		@return false;
	}
}

// map-fetch($map, $keys)
//https://gist.github.com/jlong/8760275
//
// An easy way to fetch a deep value in a multi-level map. Works much like
// map-get() except that you pass multiple keys as the second parameter to
// go down multiple levels in the nested map.
//
@function map-deep-get($map, $keys) {
  $value: $map;
  @each $key in $keys {
    $value: map-get($value, $key);
  }
  @return $value;
}

//http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

//**
// * Returns whether `$list` contains `$value`.
// *
// * @ignore Documentation: http://sassylists.com/documentation.html#sl-contain
// *
// * @param {List}    $list  - list to check
// * @param {*}       $value - value to look for
// *
// * @example
// * sl-contain(a b c, a)
// * // true
// *
// * @example
// * sl-contain(a b c, z)
// * // false
// *
// * @return {Bool}
// */

@function contains($list, $value) {
  @return not not index($list, $value);
}

//Functions taken from: http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/

//REVERSE A SASS LIST
//example:
//$list: a, b, (c d e), f, g, h;
//$new-list: reverse($list);        =  h, g, f, (c d e), b, a
//$new-list: reverse($list, true);  =  h, g, f, (e d c), b, a
@function reverse($list, $recursive: false) {
   $result: ();

   @for $i from length($list)*-1 through -1 {
      @if type-of(nth($list, abs($i))) == list and $recursive {
        $result: append($result, reverse(nth($list, abs($i)), $recursive));
      }

      @else {
        $result: append($result, nth($list, abs($i)));
      }
   }

   @return $result;
}

//SELECT FIRST AND LAST VALUES IN A LIST
//example:
//$list: a, b, c, d, e, f;
//$first: first($list);  =  a
//$last: last($list);    =  f
@function first($list) {
  @return nth($list, 1);
}
//select last value in a list
@function last($list) {
  @return nth($list, length($list));
}

//FIND THE INDEX OF THE LAST OF A CERTAIN VALUE IN A LIST
//example
//$list: a, b, c, a, d, e, a, f;
//$first-index: index($list, a);      =  1
//$last-index: last-index($list, a);  =  7
//$middle-index: last-index($list, a, 6) = 4
@function last-index($list, $value, $index: length($list)) {
  $value-index: null;

  @for $i from 1 through $index {
    @if nth($list, $i) == $value {
      $value-index: $i;
    }
  }

  @return $value-index;
}

//Join a value to the start of a list
//uses the same syntax as the built in append function
@function prepend($list, $value) {
	@return join($value, $list);
}

//insert a value into a specific spot in the list
@function insert-nth($list, $index, $value) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
  }

  @else if $index < 1 {
    @warn "List index 0 must be a non-zero integer for `insert-nth`";
  }

  @else if $index > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
  }

  @else {
    $result: ();

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }

      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

//Replace one specific value in a list with another value
//If recursive is set to true, it will change all occurrences rather than just the first
@function replace($list, $old-value, $new-value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, replace(nth($list, $i), $old-value, $new-value, $recursive));
    }

    @else {
      @if nth($list, $i) == $old-value {
        $result: append($result, $new-value);
      }

      @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

//replace a specific value at a specific index
@function replace-nth($list, $index, $value) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
  }

  @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `replace-nth`.";
  }

  @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
  }

  @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }

      @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

//remove a specific value from a list
@function remove($list, $value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, remove(nth($list, $i), $value, $recursive));
    }

    @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

//remove a value at a specific index in a list
@function remove-nth($list, $index) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  }

  @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  }

  @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  }

  @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

//SLICING A LIST
//Example:
//$list: a, b, c, d, e, f;
//$new-list: slice($list, 3, 5);  =  c, d, e

@function slice($list, $start: 1, $end: length($list)) {
  $result: null;

  @if type-of($start) != number or type-of($end) != number {
    @warn "Either $start or $end are not a number for `slice`.";
  }

  @else if $start > $end {
    @warn "The start index has to be lesser than or equals to the end index for `slice`.";
  }

  @else if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
  }

  @else if $start > length($list) {
    @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
  }

  @else if $end > length($list) {
    @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
  }

  @else {
    $result: ();

    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

//OUTPUT A LIST AS A STRING
//example:
//$list: a, b, c d e, f, g, h;
//$new-list: to-string($list);   =    abcdefgh
//$new-list: to-string($list, '-');   =   a-b-c-d-e-f-g-h
@function to-string($list, $glue: '', $is-nested: false) {
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: $result#{to-string($e, $glue, true)};
    }

    @else {
      $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e});
    }
  }

  @return $result;
}

//SHIFT THE INDEXES OF A LIST
//example:
//$list: a, b, c, d, e, f;
//$new-list: shift($list, 1);   =  f, a, b, c, d, e
//$new-list: shift($list, -3);  =  d, e, f, a, b, c
@function shift($list, $value: 1) {
  $result: ();

  @for $i from 0 to length($list) {
    $result: append($result, nth($list, ($i - $value) % length($list) + 1));
  }

  @return $result;
}

