///************\
//	HELPERS
//************/

@mixin MG-noDots { margin: 0; padding: 0; list-style: none; }
%noDots { @include MG-noDots; }

///////////////////////
//laziness shortcuts//
/////////////////////

/// Mixin helper to output vendor prefixes
/// @author HugoGiraudel
/// @param {String} $property - Unprefixed CSS property
/// @param {*} $value - Raw CSS value
/// @param {List} $prefixes - List of prefixes to output
@mixin MG-prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }

  #{$property}: $value;
}

//Just get straight into styling a :before or :after without worrying about content or display
@mixin MG-before($display: block) {
	&:before {
		content: "";
		display: $display;
		@content;
	}
}
@mixin MG-after($display: block) {
	&:after {
		content: "";
		display: $display;
		@content;
	}
}
@mixin MG-before-after($display: block) {
	&:before, &:after {
		content: "";
		display: $display;
		@content;
	}
}

//set equal height and width
@mixin MG-size($height, $width: $height){
	height: $height;
	width: $width;
}


//Because writing "pos" is easier than "background-position"
@mixin MG-pos ($bg_position){
	background-position: $bg_position;
};

@mixin MG-hover {
	@if ($ie8){
		&:hover, &:focus {
			@content;
		}
	} @else {
		@include MG-mq($MQG-interactives--have-hoverState){
			&:hover, &:focus {
				@content;
			}
		}
	}
}

//simple mixin for checking if a variable is equal to a value
@mixin MG-is($variable, $value){
	@if ($variable == $value){
		@content;
	}
}

//simple mixin for checking if a variable is NOT equal to a value
@mixin MG-isNot($variable, $value){
	@if ($variable != $value){
		@content;
	}
}

//Quick mixin for only hiding something if JS is enabled
@mixin MG-jsHide {
	display: none;
	.no-js & { display: block;  }
}

////////////////////////////////////
//Browser compatibility shortcuts//
//////////////////////////////////

//Allows you to use rem line-height instead of ems (much easier to develop with)
//line-height is given to mixin in pixels, mixin converts it
@mixin MG-line-height($sizeValue) {
	line-height: $sizeValue + px; //fallback for browsers that don't support REM
	@if ($lt-ie9 == false){
		line-height: ($sizeValue / 10) + rem;//only renders rem in modern style sheet
	}
}

//Allows you to use rem fontsize instead of ems (much easier to develop with)
//font size given to mixin in pixels or rem, the mixin then converts it to the other value
@mixin MG-font-size($sizeValue, $lineHeight: false) {

	//If using pixels for the base unit
	@if (unit($sizeValue) == 'px'){
		font-size: $sizeValue; //fallback for browsers that don't support REM
		@if ($lt-ie9 == false){
			font-size: (strip-units($sizeValue) / 10) * 1rem;//only renders rem in modern style sheet
		}

	//If using REM as your base unit
	} @else if (unit($sizeValue) == 'rem') {
		font-size: strip-units($sizeValue) * 10; //fallback for browsers that don't support REM
		@if ($lt-ie9 == false){
			font-size: ($sizeValue / 10);//only renders rem in modern style sheet
		}

	//If no unit given
	} @else if (unitless($sizeValue)){
		@warn "#{$sizeValue} is assumed to be in pixels";
		font-size: $sizeValue * 1px; //fallback for browsers that don't support REM
		@if ($lt-ie9 == false){
			font-size: ($sizeValue / 10) * 1rem;//only renders rem in modern style sheet
		}
	}
	@if ($lineHeight != false){
		line-height: $lineHeight;//use unitless values eg. (1.3) for the best results
	}
}

@mixin MG-box-sizing ($type: border-box) {
	box-sizing: $type;
	*behavior: url(../htc/boxsizing.htc);
}
%box-sizing {
	@include MG-box-sizing;
}

@mixin MG-inline-block {
	display: inline-block;
	@if ($lt-ie9 == true){
		zoom: 1;//for IE7
		*display: inline;//for IE7
	}
}

//don't forget about appearance: none; to clear defaults particularly on submit buttons
//appearance not supported by auto-prefix
@mixin MG-appearanceNone {
   -webkit-appearance: none!important;
   -moz-appearance:    none!important;
   appearance:         none!important;
   //necessary for iOS 7
   border-radius:0;
}
%appearanceNone { @include MG-appearanceNone; }

//allows the styling of placeholder text
@mixin MG-placeholder($color:$CG-input--placeholder) {
	//#767676 is the lightest possible grey against a white bg that passes AA for small text
	@if ($gt-ie8) {
		&::-webkit-input-placeholder { color: $color; @content; } //safari and chrome
		&:-moz-placeholder { color: $color; opacity: 1; @content; } //* Firefox 18- */
		&::-moz-placeholder { color: $color; opacity: 1; @content; } //* Firefox 19+ */
		&:-ms-input-placeholder { color: $color; @content; } //IE 9+
		&::placeholder { color: $color; @content; } //future proofing
	}
	@if ($ie8) {
		&.placeholdersjs { color: $color; @content; } //IE8 and lower (with help of polyfill)
	}
}

//HYPHENTATION (Doesn't work in all browsers... yet)
//Also needs to use hyphenator.js https://code.google.com/p/hyphenator/ for browsers that don't support hyphenation natively if hyphenation in all modern browsers is essential
@mixin MG-hyphenate {
	-webkit-hyphens: auto;
       -moz-hyphens: auto;
        -ms-hyphens: auto;
            hyphens: auto;
}


///////////////////////////////////////////////////////
//************** TECHNIQUE SHORTCUTS ***************//
//////////////////////////////////////////////////////

////////////////////////
// Image replacement //
///////////////////////

//Image replacement as a function
@mixin MG-ir { font-size: 0em; text-shadow: none; color: transparent; text-transform: capitalize; display: block; }
%ir { @include MG-ir; };

//old image replacement
//@mixin MG-ir { display: block; text-indent:-999px; overflow:hidden; text-align:left; direction:ltr; }

@mixin MG-ir2 { line-height: 999px; overflow: hidden; font-size: 0; color: transparent; text-transform: capitalize; }//*works on submit buttons even in IE7*/
%ir2 { @include MG-ir2; };

//////////////////////
// Visually hidden //
////////////////////

//(visually hidden) so screen readers can read it but normally it can not be seen
@mixin MG-vh {
	border:0;
	//clip:rect(0 0 0 0);
	width:0;
	height:0;
	padding:0;
	overflow:hidden;
	position:absolute;
	@include MG-opacity(0);
}
%vh { @include MG-vh; };

//counters the vh styles
@mixin MG-anti-vh {
	//border:0;
	//clip: auto;
	width:auto;
	height:auto;
	position: static;
	@include MG-opacity(1);
}
%anti-vh { @include MG-anti-vh; }

//a less favorable version of visually hidden since browsers still have to render it way off screen
@mixin MG-offscreen { position: absolute; left: -999em; }


////////////////
// Alignment//
//////////////

//vertically center align text that is only on one line
@mixin MG-valign-text {
	@include MG-before{
		display: inline-block;
		height: 100%;
		vertical-align: middle;
		@content;
	}
}
%valign-text { @include MG-valign-text; }

//CENTER AN ELEMENT BOTH VERTICALLY AND HORIZONTALLY (or only one of the two)
//Element must have a set width and height to work

//usage:
//@include MG-centered; //center both horizontally and vertically
//@include MG-centered(v); // only center vertically
//@include MG-centered(h); // only center horizontally

@mixin MG-centered($type: both, $isModern: 'not-modern') {

	position: absolute;

	@if ($isModern == 'modern') {
		@if ($type == both) {
			top: 50%;
			left: 50%;
			@include MG-prefix(transform, unquote('translateY(-50%) translateX(-50%)'), ms webkit);
		} @else if ($type == v) {
			top: 50%;
			@include MG-prefix(transform, unquote('translateY(-50%)'), ms webkit);
		} @else if ($type == h) {
			left: 50%;
			@include MG-prefix(transform, unquote('translateX(-50%)'), ms webkit);
		}
	} @else {
		@if ($type == both) {
			top: 0;
			bottom: 0;
			left: 0;
			right: 0;
			margin: auto;
		} @else if ($type == v) {
			top: 0;
			bottom: 0;
			margin: auto 0;
		} @else if ($type == h) {
			left: 0;
			right: 0;
			margin: 0 auto;
		}
	}
}
//use these over the mixin if possible
%centered { @include MG-centered; }
%centered--h { @include MG-centered(h); }
%centered--v { @include MG-centered(v); }

//Use this if parent is smaller than the target element
//(the regular centered mixin works in chrome when parent is smaller but not in Fire fox)
@mixin MG-centered-margin ($size, $type: both, $side: left) {
	position: absolute;
	@if ($type == v) {
		@if ($side == left){
			$side: top;
		}
		#{$side}: 50%;
		top: 50%;
		margin-#{$side}: -$size / 2;
		height: $size;
	} @else if ($type == h) {
		#{$side}: 50%;
		margin-#{$side}: -$size / 2;
		width: $size;
	} @else {
		top: 50%;
		left: 50%;
		margin-top: -$size / 2;
		margin-left: -$size / 2;
		height: $size;
		width: $size;
	}
}

//make an element fill the entire area of it's parent (parent needs position relative)
@mixin MG-fill($adjustments: false) {

	@if ($adjustments == false){
		position: absolute;
		top: 0;
		left: 0;
		@include MG-size(100%);
	} @else {
		$adjustments: defaultTo($adjustments, (
			top: 0,
			left: 0,
			right: 0,
			bottom: 0,
			position: absolute,
		));
		top: map-get($adjustments, top);
		left: map-get($adjustments, left);
		bottom: map-get($adjustments, bottom);
		right: map-get($adjustments, right);
		position: map-get($adjustments, position);
		@include MG-size(auto);
	}
}

//make a div take up the full screen height
@mixin MG-fullScreen($subtraction: 0px) {
	@if ($subtraction == 0px) {
		min-height: 100vh;
	} @else {
		min-height: calc(100vh - #{$subtraction});
	}
}

////////////
// Other //
///////////

//clear fix
@mixin MG-clearfix{
	@if ($lt-ie9 == true){ zoom: 1; }
	&:before, &:after { content:""; display:table; width: 100%; }
	&:after{ clear: both; }
}
%clearfix { @include MG-clearfix; }


//multi :not() rule
@mixin MG-not ($ignorList...) {
	//if only a single value given
	@if (length($ignorList) == 1){
		//it is probably a list variable so set ignore list to the 1st item
		$ignorList: nth($ignorList,1);
	}
	$notOutput: '';
	//for each item in the list
	@each $not in $ignorList {
		//generate a :not([ignored_item]) segment for each item in the ignore list and put them back to back
		$notOutput: $notOutput + ':not(#{$not})';
	}
	//output the full :not() rule including all ignored items
	&#{$notOutput} {
		@content;
	}
}

//adds a shadow to items that have overflow:auto
@mixin MG-overflowShadow ($direction: h, $bg: #fff, $shadow: $CB-grey-dark, $shadowSize: 20px, $baseSize: 11 * $shadowSize){

	$start: to right;
	$end: to left;

	$sizeBase: $baseSize 100%;
	$sizeShadow: $shadowSize 100%;

	$posStart: 0 0;
	$posEnd: 100% 0;

	$axis : x;

	@if ($direction == 'v'){
		$start: top;
		$end: bottom;

		$sizeBase: 100% $baseSize;
		$sizeShadow: 100% $shadowSize;

		$posEnd: 0 100%;

		$axis : y;
	} @else if ($direction != 'h'){
		@error "direction (#{$direction}) must be either 'h' (horizontal) or 'v' (vertical)";
	}

	overflow-#{$axis}: auto;

	@if ($gt-ie8) {
		//adds the shadow to the table
		background-image:
			linear-gradient($start, $bg, rgba($bg, 0)),
			linear-gradient($end, $bg, rgba($bg, 0)),
			linear-gradient($start, $shadow, rgba($shadow, 0)),
			linear-gradient($end, $shadow, rgba($shadow, 0));

		background-position: $posStart, $posEnd, $posStart, $posEnd;
		background-repeat: no-repeat;
		background-color: $bg;
		background-size: $sizeBase, $sizeBase, $sizeShadow, $sizeShadow;
		background-attachment: local, local, scroll, scroll;
	}
}

//quickly and easily generate css from a map of css rules and values
@mixin MG-generateCSS($cssMap){
	@each $rule, $value in $cssMap {
		#{$rule}: $value;
	}
}
