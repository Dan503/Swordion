///***********************************\
//
//				GRADIENTS
//
//************************************/


$gradTypes: (
	v : (linear, to bottom),
	h : (linear, to right),
	diag-down : (linear, 135deg),
	diag-up : (linear, 45deg),
	radial : (radial, ellipse at center),
);


$validStrings: map-keys($gradTypes);

@function errorMessage($value){
	@return "#{$value} needs to be a number given in degrees or be a valid string. Valid strings are: #{$validStrings}";
}

//*********************\
//	IE only Gradient
//*********************/
// Good to use this in combination with the multi-gradient mixin

@mixin M-ie-grad($gradColor1,$gradColor2,$type:v){
	//vertical (|)
	@if ($type == v){
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$gradColor1}', endColorstr='#{$gradColor2}',GradientType=0 );
	}
	//horizontal (-)
	@if ($type == h){
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$gradColor1}', endColorstr='#{$gradColor2}',GradientType=1 );
	}
}


//*********************\
//	Standard Gradient
//*********************/
@mixin M-grad(
	$gradColor1,
	$gradColor2: null,
	$type: v,
	$settings: ()
){

//advanced default settings
	$settings: defaultTo($settings, (
		backup: default,
		radial-range: closest-side,
		radial-type: unquote(''),/*default is ellipse*/
		radial-pos: center,
		repeat: false,
	));

	$isMultiGrad: type-of(first($gradColor2)) != 'color';
	$colorSet: $gradColor1;//for multi-grad code

	//allows multigrads to use second slot for type declaration and 3rd slot for settings
	$settings: if(type-of($type) == "map", $type, $settings);
	$type: if($isMultiGrad, $gradColor2, $type);

	$radialSettings : unquote("#{map-get($settings, radial-type)} #{map-get($settings, radial-range)} at #{map-get($settings, radial-pos)}");

	$backup: map-get($settings, backup);

	$repeater: unquote(if(map-get($settings, repeat), 'repeating-', ''));

	$color1: $gradColor1;
	$pureColor1 : first($color1);

	$color2: $gradColor2;
	$pureColor2 : first($color2);

	@if((not contains($validStrings, $type)) and (type-of($type) != 'number')){
		@error errorMessage($type);
	}

	@if($isMultiGrad){
		background: if($backup == default, transparent, $backup);
	} @else {
		background: if($backup == default, mix($pureColor1, $pureColor2), $backup);
	}

	@each $gradType, $attributes in $gradTypes {
		$cssGradType: nth($attributes,1);
		$direction: nth($attributes,2);

		@if($gt-ie8){
			@if($isMultiGrad){
				@if ($type == radial){
					background: #{$repeater}radial-gradient($radialSettings, $colorSet);
				} @else if($type == $gradType){
					background: #{$repeater}#{$cssGradType}-gradient($direction, $colorSet);
				} @else if (type-of($type) == 'number'){
					background: #{$repeater}linear-gradient($type, $colorSet);
				}
			} @else {
				@if ($type == radial){
					background: #{$repeater}radial-gradient($radialSettings, $color1, $color2);
				} @else if($type == $gradType){
					background: #{$repeater}#{$cssGradType}-gradient($direction, $color1, $color2);
				} @else if (type-of($type) == 'number'){
					background: #{$repeater}linear-gradient($type, $color1, $color2);
				}
			}
		} @else if ($type == $gradType and ($type == v or $type == h)) {
			@if($isMultiGrad){
				$pureColor1: first(first($colorSet));
				$pureColor2: first(last($colorSet));
			}
			@include M-ie-grad($pureColor1,$pureColor2,$type);
		}
	}
}

//***********************\
//	Gradient with image
//***********************/

//modern browsers only (IE10+)
//currently only designed to work with the manual sprite

@mixin M-img-grad($img-position, $gradColor1, $gradColor2, $type: v, $backup: mix($gradColor1, $gradColor2), $image: $manual_sprite, $retina_img: $manual_sprite2x, $bgSize: $manual_sprite_width auto){

	background: $backup;

	@if (type-of($type) == 'number' or contains($validStrings,$type)){

		@if ($lt-ie9 == false){

			@if (type-of($type) == 'number'){
				@if (unit($type) == 'deg'){
					background: $image, linear-gradient($type,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, linear-gradient($type,  $gradColor1,$gradColor2);
					}
				} @else {
					@warn errorMessage($type);
				}
			} @else {

				//vertical (|)
				@if ($type == v){
					background: $image, linear-gradient(to bottom,  $gradColor1,$gradColor2);


					@include M-retina {
						background: $retina_img, linear-gradient(to bottom,  $gradColor1,$gradColor2);
					}
				}

				//horizontal (-)
				@if ($type == h){
					background: $image, linear-gradient(to right,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, linear-gradient(to right,  $gradColor1,$gradColor2);
					}
				}

				//Diagonal down (\)
				@if ($type == diag-down){
					background: $image, linear-gradient(135deg,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, linear-gradient(135deg,  $gradColor1,$gradColor2);
					}
				}

				//Diagonal up (/)
				@if ($type == diag-up){
					background: $image, linear-gradient(45deg,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, linear-gradient(45deg,  $gradColor1,$gradColor2);
					}
				}

				//Radial (o)
				@if ($type == radial) {
					background: $image, radial-gradient(ellipse at center,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, radial-gradient(ellipse at center,  $gradColor1,$gradColor2);
					}
				}

				@if ($type == radial-top-left) {
					background: $image, radial-gradient(ellipse at top left,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, radial-gradient(ellipse at top left,  $gradColor1,$gradColor2);
					}
				}

				@if ($type == radial-top-right) {
					background: $image, radial-gradient(ellipse at top right,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, radial-gradient(ellipse at top right,  $gradColor1,$gradColor2);
					}
				}

				@if ($type == radial-bottom-right) {
					background: $image, radial-gradient(ellipse at bottom right,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, radial-gradient(ellipse at bottom right,  $gradColor1,$gradColor2);
					}
				}

				@if ($type == radial-bottom-left) {
					background: $image, radial-gradient(ellipse at bottom left,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, radial-gradient(ellipse at bottom left,  $gradColor1,$gradColor2);
					}
				}


				background-repeat: no-repeat;
				background-position: $img-position, 0 0;

				@include M-retina {
					background-size: $bgSize, auto auto;
				}
			}
		}//end lt-ie9 check
	} @else {
		@error errorMessage($type);
	}
}
