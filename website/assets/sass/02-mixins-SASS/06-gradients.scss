///***********************************\
//
//				GRADIENTS
//
//************************************/


$gradTypes: (
	v : (linear, to bottom),
	h : (linear, to right),
	diag-down : (linear, 135deg),
	diag-up : (linear, 45deg),
	radial : (radial, ellipse at center),
	radial-top-left: (radial, ellipse at top left),
	radial-top-right: (radial, ellipse at top right),
	radial-bottom-left: (radial, ellipse at bottom left),
	radial-bottom-right: (radial, ellipse at bottom right),
);


$validStrings: map-keys($gradTypes);

@function errorMessage($value){
	@return "#{$value} needs to be a number given in degrees or be a valid string. Valid strings are: #{$validStrings}";
}

//*********************\
//	IE only Gradient
//*********************/
// Good to use this in combination with the multi-gradient mixin

@mixin M-ie-grad($gradColor1,$gradColor2,$type:v){
	//vertical (|)
	@if ($type == v){
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$gradColor1}', endColorstr='#{$gradColor2}',GradientType=0 );
	}
	//horizontal (-)
	@if ($type == h){
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$gradColor1}', endColorstr='#{$gradColor2}',GradientType=1 );
	}
}


//*********************\
//	Standard Gradient
//*********************/

@mixin M-grad($gradColor1, $gradColor2: null,$type: v, $backup: null){

	$color1: $gradColor1;
	$pureColor1 : first($color1);

	$color2: $gradColor2;
	$pureColor2 : first($color2);

	$isMultiGrad: type-of($gradColor1) != 'color';

	//allows multigrads to use second slot for type declaration
	$type: if(contains($validStrings, $gradColor2), $gradColor2, $type);

	//assumes
	@if($isMultiGrad){
		$colorSet: first($gradColor1);

		background: if($backup == null, transparent, $backup);

		@each $gradType, $settings in $gradTypes {
			$cssGradType: nth($settings,1);
			$direction: nth($settings,2);

			@if($gt-ie8){
				@if($type == $gradType){
					background: #{$cssGradType}-gradient($direction, $colorSet);
				} @else if (type-of($type) == 'number'){
					background: linear-gradient($type, $colorSet);
				} @else {
					@error errorMessage($type);
				}
			} @else {
				@if ($type == $gradType and ($type == v or $type == h)){
					$pureColor1: first(first($colorSet));
					$pureColor2: first(last($colorSet));
					@include M-ie-grad($pureColor1,$pureColor2,$type);
				}
			}
		}
	} @else {
		background: if($backup == null, mix($pureColor1, $pureColor2), $backup);

		@each $gradType, $settings in $gradTypes {
			$cssGradType: nth($settings,1);
			$direction: nth($settings,2);

			@if($gt-ie8){
				@if($type == $gradType){
					background: #{$cssGradType}-gradient($direction, $color1, $color2);
				} @else if (type-of($type) == 'number'){
					background: linear-gradient($type, $color1, $color2);
				} @else {
					@error errorMessage($type);
				}
			} @else {
				@if ($type == $gradType and ($type == v or $type == h)){
					@include M-ie-grad($pureColor1,$pureColor2,$type);
				}
			}
		}
	}
}

//***********************\
//	Gradient with image
//***********************/

//modern browsers only (IE10+)
//currently only designed to work with the manual sprite

@mixin M-img-grad($img-position, $gradColor1, $gradColor2, $type: v, $backup: mix($gradColor1, $gradColor2), $image: $manual_sprite, $retina_img: $manual_sprite2x, $bgSize: $manual_sprite_width auto){

	background: $backup;

	@if (type-of($type) == 'number' or contains($validStrings,$type)){

		@if ($lt-ie9 == false){

			@if (type-of($type) == 'number'){
				@if (unit($type) == 'deg'){
					background: $image, linear-gradient($type,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, linear-gradient($type,  $gradColor1,$gradColor2);
					}
				} @else {
					@warn errorMessage($type);
				}
			} @else {

				//vertical (|)
				@if ($type == v){
					background: $image, linear-gradient(to bottom,  $gradColor1,$gradColor2);


					@include M-retina {
						background: $retina_img, linear-gradient(to bottom,  $gradColor1,$gradColor2);
					}
				}

				//horizontal (-)
				@if ($type == h){
					background: $image, linear-gradient(to right,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, linear-gradient(to right,  $gradColor1,$gradColor2);
					}
				}

				//Diagonal down (\)
				@if ($type == diag-down){
					background: $image, linear-gradient(135deg,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, linear-gradient(135deg,  $gradColor1,$gradColor2);
					}
				}

				//Diagonal up (/)
				@if ($type == diag-up){
					background: $image, linear-gradient(45deg,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, linear-gradient(45deg,  $gradColor1,$gradColor2);
					}
				}

				//Radial (o)
				@if ($type == radial) {
					background: $image, radial-gradient(ellipse at center,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, radial-gradient(ellipse at center,  $gradColor1,$gradColor2);
					}
				}

				@if ($type == radial-top-left) {
					background: $image, radial-gradient(ellipse at top left,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, radial-gradient(ellipse at top left,  $gradColor1,$gradColor2);
					}
				}

				@if ($type == radial-top-right) {
					background: $image, radial-gradient(ellipse at top right,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, radial-gradient(ellipse at top right,  $gradColor1,$gradColor2);
					}
				}

				@if ($type == radial-bottom-right) {
					background: $image, radial-gradient(ellipse at bottom right,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, radial-gradient(ellipse at bottom right,  $gradColor1,$gradColor2);
					}
				}

				@if ($type == radial-bottom-left) {
					background: $image, radial-gradient(ellipse at bottom left,  $gradColor1,$gradColor2);

					@include M-retina {
						background: $retina_img, radial-gradient(ellipse at bottom left,  $gradColor1,$gradColor2);
					}
				}


				background-repeat: no-repeat;
				background-position: $img-position, 0 0;

				@include M-retina {
					background-size: $bgSize, auto auto;
				}
			}
		}//end lt-ie9 check
	} @else {
		@error errorMessage($type);
	}
}
