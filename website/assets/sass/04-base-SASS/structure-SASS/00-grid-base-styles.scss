
//================================================*\
/*	GRID STYLING FILE						*/
//----------------------------------------------------
//	This file holds the code that generates the
//	classes for the grid system.
//
//	DO NOT EDIT THIS FILE UNLESS YOU REALLY KNOW
//	WHAT YOU'RE DOING!
//================================================*/


//switches IE (and other non-flexbox friendly browsers) to using float mode
@mixin M-ieFloat {
	.no-flexbox & {
		display: block;
		@extend %clearfix;
		& > .grid__cell {
			float: left;
			display: block;
		}
	}
}


//================================================*\
/*				GRID WIDTHS						*/
//----------------------------------------------------
//	Quickly and easily apply standard percentage
//	widths to grid cells based on fractions.
//
//	step 1: give container the width modifier class.
//			eg: grid--thirds
//	step 2: give extra wide grid span classes
//			eg. grid__cell--span2
//	WARNING: using a span class will likely require additional
//			 styling for tablets and smaller devices
//
//	EXAMPLE HTML:
//	<ul class="grid grid--cols-3">
//		<li class="grid__cell">Column is 1/3 wide on desktop</li>
//		<li class="grid__cell grid__cell--span-2">column is 2/3 wide on desktop</li>
//	</ul>
//================================================*/

@for $i from 1 through length($gridBreakPoints) {
	$columnWidth: percentage(1/$i);
	$breaks: nth($gridBreakPoints, $i);

//sets the default grid__cell widths
	.grid--cols-#{$i} {
		> .grid__cell {
			width: $columnWidth;

//.grid__cell--span-# styling
			@if ($i > 2){
				@for $x from 2 through $i {
					&--span-#{$x} { width: $columnWidth * $x; }
				}
			}
		}

//Applies the media queries for the break points
		&:not(.grid--disableMQs) {
			@if ($breaks != false) {
				@for $y from 1 through length($breaks) {
					$MQ-breakData : nth($breaks, $y);
					$MQ-screenWidth : nth($MQ-breakData, 1);
					$MQ-columnWidth : nth($MQ-breakData, 2);
					@include MG-mq(max,$MQ-screenWidth){
						> .grid__cell { width: $MQ-columnWidth; }
					}
				}
			}
		}
		.no-flexbox &.grid--enableWrapping > .grid__cell {
			@if ($i > 2) {
				&:nth-child(#{$i}n+1) { clear: left; }
			}
		}
	}
}


//base grid styling
.grid {
	@extend %noDots;
	min-width: 100%;
	border: 0 solid #000;
	@if ($gt-ie8) {
		@extend %flex;
		@include MG-prefix(align-content, stretch, $flexPrefixes);

		@include MG-mq(max,bp('page')){
			@include MG-not('.grid--disableMQs', '.grid--noWrap'){
				@include MG-flexWrap;
			}
		}
	}

//grid-wrap styling... really only necessary for use with grid--gutter-#
	&__wrap {
		overflow: hidden;
	}

//base grid__cell styling
	&__cell {
		display: block;
		padding: 0;
		margin: 0;
		background-clip: padding-box!important;
		border: 0 solid transparent;
		@include MG-flexGrow;
		outline-color: #000;
		border-color: #000;

		&--vAlign {
			@include MG-prefix(align-self, center, $flexPrefixes);
		}
	}

//base grid__inner styling
		&__inner {
			//
		}

//grid--gutter-# styling
	&[class*="grid--gutter-"] {
		&.grid--outerGutters {
			margin: 0;
			&-v {
				margin-top: 0;
				margin-bottom: 0;
			}
			&-h {
				margin-left: 0;
				margin-right: 0;
			}
		}

		> .grid__cell, & {
			border-color: transparent;
			@if ($ie8) {
				border-color: $gutter-ieFallback;
			}
		}
		/*@if($lt-ie10) {
			border-left: 0;
			margin-left: 0;
		}*/
	}

	@mixin M-grid-cellGutter ($gutter){
		margin: -$gutter;
		border-width: $gutter 0 0 $gutter;
		> .grid__cell {
			border-width: 0 $gutter $gutter 0;
		}
	}
	@mixin M-grid-delayedGutter($gutter) {
		//only apply the outer horizontal gutters if the screen size is smaller than the page width + gutter size
		&.grid--outerGutters-delayedHorizontal {
			@include MG-mq(max, (bp('page') + $gutter)){
				margin-left: 0;
				margin-right: 0;
			}
		}
	}
	@each $class, $gutter in $cellGutters {
		&--gutter-#{$class} {
			@if (length($gutter) > 1) {
				@each $screenSize, $value in $gutter {
					@if ($screenSize == 'default') {
						@include M-grid-cellGutter($value);
					} @else {
						@include MG-mq(max,$screenSize){
							@include M-grid-cellGutter($value);
						}
					}
					@include M-grid-delayedGutter($value);
				}
			} @else {
				@include M-grid-cellGutter($gutter);
				@include M-grid-delayedGutter($gutter);
			}
		}
	}

//vertical alignment code
	@if ($gt-ie8) {
		&--vAlign {
			&:not(.grid--hasInners){
				> .grid__cell {
					@include MG-flex;
					@include MG-flexValign;
				}
			}
			&.grid--hasInners {
				@include MG-flexValign(stretch);
				> .grid__cell > .grid__inner {
					@include MG-flex;
					@include MG-flexValign;
				}
			}
		}
	}

	&--hasInners {
		> .grid__cell {
			@include MG-flex;
			@include MG-flexValign(stretch);
		}
		&[class*="grid--padding-"] {
			> .grid__cell {
				padding: 0!important;
			}
		}
	}

//tabular backup for IE9 and below
	.no-flexbox & {
		display: table;
		width: 100%;
		> .grid__cell { display: table-cell; vertical-align: top; }
		&__inner { display: block; }
	 	&--vAlign > .grid__cell { vertical-align: middle; }
	}


//Unfortunately this is a necessity for IE compatibility
	&--enableWrapping {
		@include M-ieFloat;

		@if ($gt-ie8) {
			.flexbox & {
				@include MG-flexWrap;
			}
		}
	}

//allows IE to use floats instead of display table without affecting modern browsers
	&--ieFloat {
		@include M-ieFloat;
	}
}



